@Library(value='iow-ecs-pipeline@2.2.0', changelog=false) _

pipeline {
    agent {
        node {
            label 'team:iow'
        }
    }
    parameters {
        choice(choices: ['snapshots', 'releases'], description: 'type of build', name: 'BUILD_TYPE')
    }
    triggers {
        pollSCM('H/5 * * * *')
    }
    stages {
        stage('clean workspace') {
            steps {
                script {
                    pipelineUtils.cleanWorkspace()
                }
            }
        }
        stage('prep workspace') {
            steps {
                script {
                  pipelineUtils.cloneGitRepo()
                  p = pipelineCfg('pipeline.yml')
                }
            }
        }
        stage('pull ojdbc jar from s3') {
            steps {
                sh "mkdir ${WORKSPACE}/oracle"
                sh "aws s3 cp s3://owi-common-resources/resources/InstallFiles/oracle-jdbc-driver/ojdbc6-11.2.0.2.0-1.jar ${WORKSPACE}/oracle/ojdbc6-11.2.0.2.0-1.jar"
            }
        }
        stage('pull scripts') {
            steps {
                script {
                    pipelineUtils.pullEcsScripts()
                }
            }
        }
        stage('create virtualenv') {
            steps {
                script {
                    pipelineUtils.setUpPythonVirtualEnv()
                    pipelineUtils.pipInstall('--only-binary=bumpversion bumpversion==0.5.3 requests boto3 pyyaml chevron')
                }
            }
        }
        stage('build docker image') {
            steps {
                script {
                    version = pipelineUtils.bumpVersion(params.BUILD_TYPE)
                    buildConfigs = p['docker_build'] ?: [p]
                    dockerPipeline.buildPublishAndCleanUpDockerImages(buildConfigs, version)
                }
            }
        }
        stage('push to git') {
            steps {
                script {
                    if ("${params.BUILD_TYPE}" == "releases") {
                        pipelineUtils.incrementToNextDevelopmentVersion()
                        pipelineUtils.pushToGitRepo(p.gitRepoUrl, p.gitRepoCredentialsId)
                    }
                }
            }
        }
    }
}
